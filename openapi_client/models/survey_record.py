# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictStr
from openapi_client.models.survey_record_state import SurveyRecordState
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SurveyRecord(BaseModel):
    """
    SurveyRecord
    """ # noqa: E501
    record_id: Optional[StrictStr] = None
    survey_id: StrictStr
    business_id: StrictStr
    user_id: Optional[List[StrictStr]] = None
    customer_id: Optional[StrictStr] = None
    chat_history: Optional[StrictStr] = None
    summary: Optional[StrictStr] = None
    system_message: Optional[StrictStr] = None
    structured_summary: Optional[Union[str, Any]] = None
    created_at: StrictStr
    updated_at: Optional[StrictStr] = None
    survey_ended: Optional[StrictBool] = False
    record_state: Optional[SurveyRecordState] = None
    __properties: ClassVar[List[str]] = ["record_id", "survey_id", "business_id", "user_id", "customer_id", "chat_history", "summary", "system_message", "structured_summary", "created_at", "updated_at", "survey_ended", "record_state"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SurveyRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customer_id'] = None

        # set to None if chat_history (nullable) is None
        # and model_fields_set contains the field
        if self.chat_history is None and "chat_history" in self.model_fields_set:
            _dict['chat_history'] = None

        # set to None if summary (nullable) is None
        # and model_fields_set contains the field
        if self.summary is None and "summary" in self.model_fields_set:
            _dict['summary'] = None

        # set to None if system_message (nullable) is None
        # and model_fields_set contains the field
        if self.system_message is None and "system_message" in self.model_fields_set:
            _dict['system_message'] = None

        # set to None if structured_summary (nullable) is None
        # and model_fields_set contains the field
        if self.structured_summary is None and "structured_summary" in self.model_fields_set:
            _dict['structured_summary'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SurveyRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "record_id": obj.get("record_id"),
            "survey_id": obj.get("survey_id"),
            "business_id": obj.get("business_id"),
            "user_id": obj.get("user_id"),
            "customer_id": obj.get("customer_id"),
            "chat_history": obj.get("chat_history"),
            "summary": obj.get("summary"),
            "system_message": obj.get("system_message"),
            "structured_summary": obj.get("structured_summary"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "survey_ended": obj.get("survey_ended") if obj.get("survey_ended") is not None else False,
            "record_state": obj.get("record_state")
        })
        return _obj


