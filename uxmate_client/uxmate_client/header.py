# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from uxmate_client.models.allowreserved import Allowreserved
from uxmate_client.models.content import Content
from uxmate_client.models.deprecated import Deprecated
from uxmate_client.models.description import Description
from uxmate_client.models.example1 import Example1
from uxmate_client.models.examples import Examples
from uxmate_client.models.explode import Explode
from uxmate_client.models.required import Required
from uxmate_client.models.schema1 import Schema1
from uxmate_client.models.style import Style
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Header(BaseModel):
    """
    Header
    """ # noqa: E501
    description: Optional[Description] = None
    required: Optional[Required] = None
    deprecated: Optional[Deprecated] = None
    style: Optional[Style] = None
    explode: Optional[Explode] = None
    allow_reserved: Optional[Allowreserved] = Field(default=None, alias="allowReserved")
    var_schema: Optional[Schema1] = Field(default=None, alias="schema")
    example: Optional[Example1] = None
    examples: Optional[Examples] = None
    content: Optional[Content] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["description", "required", "deprecated", "style", "explode", "allowReserved", "schema", "example", "examples", "content"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Header from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "additional_properties",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of required
        if self.required:
            _dict['required'] = self.required.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deprecated
        if self.deprecated:
            _dict['deprecated'] = self.deprecated.to_dict()
        # override the default output from pydantic by calling `to_dict()` of style
        if self.style:
            _dict['style'] = self.style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of explode
        if self.explode:
            _dict['explode'] = self.explode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of allow_reserved
        if self.allow_reserved:
            _dict['allowReserved'] = self.allow_reserved.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of example
        if self.example:
            _dict['example'] = self.example.to_dict()
        # override the default output from pydantic by calling `to_dict()` of examples
        if self.examples:
            _dict['examples'] = self.examples.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Header from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": Description.from_dict(obj.get("description")) if obj.get("description") is not None else None,
            "required": Required.from_dict(obj.get("required")) if obj.get("required") is not None else None,
            "deprecated": Deprecated.from_dict(obj.get("deprecated")) if obj.get("deprecated") is not None else None,
            "style": Style.from_dict(obj.get("style")) if obj.get("style") is not None else None,
            "explode": Explode.from_dict(obj.get("explode")) if obj.get("explode") is not None else None,
            "allowReserved": Allowreserved.from_dict(obj.get("allowReserved")) if obj.get("allowReserved") is not None else None,
            "schema": Schema1.from_dict(obj.get("schema")) if obj.get("schema") is not None else None,
            "example": Example1.from_dict(obj.get("example")) if obj.get("example") is not None else None,
            "examples": Examples.from_dict(obj.get("examples")) if obj.get("examples") is not None else None,
            "content": Content.from_dict(obj.get("content")) if obj.get("content") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


